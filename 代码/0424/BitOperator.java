// 位运算

public class BitOperator{
	// 编写一个main方法
	public static void main(String[] args){
		// 计算2&3
		// 1. 先得到 2的补码 => 2的原码 00000000 00000000 00000010
		// => 2的补码 00000000 00000000 00000010
		// 2. 得到 3的补码 => 3的原码 00000000 00000000 00000011
		// => 3的补码 00000000 00000000 00000011
		// 3. 按位与 &
		//		00000000 00000000 00000010
		// 		00000000 00000000 00000011
		// 		00000000 00000000 00000010 -> 运算后的补码
		// 推算运算后的原码也是一样，结果为2
		System.out.println(2&3);
		// 计算～-2
		// 1. 先得到 -2的原码 10000000 00000000 00000010
		// 2. 计算-2的反码	11111111 11111111 11111101
		// 3. -2的补码		11111111 11111111 11111110
		// 4. -2的补码取反	00000000 00000000 00000001 -> 运算后的补码
		// 推算运算后的原码也是一样，结果为1
		System.out.println(~-2);
		// 计算～2
		// 1. 先得到 2的原码 	00000000 00000000 00000010
		// 2. 计算2的补码		00000000 00000000 00000010
		// 3. 取反			11111111 11111111 11111101 -> 运算后的补码
		// 4. 运算后的反码	11111111 11111111 11111100
		// 5. 运算后的原码	10000000 00000000 00000011
		// 6. 结果为-3
		System.out.println(~2);
		
		System.out.println("======================");
		System.out.println("以上是案例，以下是自习");
		System.out.println("======================");

		// 计算2&3
		// 1. 得到2的补码 	00000000 00000000 00000000 00000010
		// 2. 得到3的补码 	00000000 00000000 00000000 00000011
		// 3. 按位与&		00000000 00000000 00000000 00000010 -> 运算后的补码
		// 4. 运算后结果为正，则补码与原码三码合一，结果为2
		System.out.println("2&3 = " + (2&3));

		// 计算2&3
		// 1. 得到2的补码 	00000000 00000000 00000000 00000010
		// 2. 得到3的补码 	00000000 00000000 00000000 00000011
		// 3. 按位与&		00000000 00000000 00000000 00000011 -> 运算后的补码
		// 4. 运算后结果为正，则补码与原码三码合一，结果为3
		System.out.println("2|3 = " + (2|3));

		// 计算～-5
		// 1. 得到-5的原码	10000000 00000000 00000000 00000101
		// 2. 得到-5的反码	11111111 11111111 11111111 11111010
		// 3. 得到-5的补码	11111111 11111111 11111111 11111011
		// 4. 取反 			00000000 00000000 00000000 00000100 -> 运算后的补码
		// 5. 运算后结果为正，则补码与原码三码合一，结果为4
		System.out.println("~-5 = " + (~-5));

		// 计算13&7
		// 1. 得到13补码		00000000 00000000 00000000 00001101
		// 2. 得到7的补码		00000000 00000000 00000000 00000111
		// 3. 按位与			00000000 00000000 00000000 00000101 -> 运算后的补码
		// 5. 运算后结果为正，则补码与原码三码合一，结果为5
		System.out.println("13&7 = " + (13&7));

		// 计算5｜-4
		// 1. 得到5的补码 	00000000 00000000 00000000 00000101
		// 2. 得到-4的原码	10000000 00000000 00000000 00000100
		// 3. 得到-4的反码	11111111 11111111 11111111 11111011
		// 4. 得到-4的补码	11111111 11111111 11111111 11111100
		// 5. 按位或			00000000 00000000 00000000 00000101
		// 					11111111 11111111 11111111 11111101 -> 运算后的补码
		// 6. 运算后的反码 	11111111 11111111 11111111 11111100
		// 7. 取反			10000000 00000000 00000000 00000011
		// 8. 运算结果为负，-3
		System.out.println("5|-4 = " + (5|-4));

		// 计算-3^3
		// 1. 得到-3原码 		10000000 00000000 00000000 00000011
		// 2. 得到-3反码		11111111 11111111 11111111 11111100
		// 3. 得到-3补码 		11111111 11111111 11111111 11111101
		// 4. 得到3的补码 	00000000 00000000 00000000 00000011
		// 5. 取异或^		11111111 11111111 11111111 11111110 -> 运算后的补码
		// 6. 运算后的反码	11111111 11111111 11111111 11111101
		// 7. 运算后的原码	10000000 00000000 00000000 00000010
		// 8. 结果为-2
		System.out.println("-3^3 = " + (-3^3));

		System.out.println("==================");
		System.out.println(">>、<<和>>>运算");
		System.out.println("==================");

		System.out.println(1 >> 2); // 1 / 2 / 2 = 0
		System.out.println(1 << 2); // 1 * 2 * 2 = 4
		System.out.println(4 << 3); // 4 * 2 * 2 * 2 = 32
		System.out.println(15 >> 2); // 15 / 2 / 2 = 3
		System.out.println(-1 << 2); 
		// -1 原码 		10000000 00000000 00000000 00000001
		// -1 反码 		11111111 11111111 11111111 11111110
		// -1 补码 		11111111 11111111 11111111 11111111
		// -1 左移两位 	11111111 11111111 11111111 11111100 -> 运算后补码
		// 补码的反码		11111111 11111111 11111111 11111011
		// 反码的原码		10000000 00000000 00000000 00000100 => -4
	}
}